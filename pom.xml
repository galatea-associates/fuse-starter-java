<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.galatea</groupId>
	<artifactId>fuse-starter-java</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>starter-java</name>
	<url>https://github.com/GalateaRaj/fuse-starter-java</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>11</java.version>
		<jaxb.api.version>2.3.1</jaxb.api.version>
		<!-- VM and application args used during maven steps, e.g. mvn test -->
		<!-- Use log config that writes to stdout so that application logs during tests show up in Jenkins build logs -->
		<argLine>
			-Dapplication.name=${project.artifactId}
			-Dlog4j.configurationFile=log4j2-test.yml
			-Dserver.port=8080
		</argLine>
		<sonar.exclusions>**/ProtobufMessages.java</sonar.exclusions>
		<sonar.coverage.exclusions>
			src/main/java/org/galatea/starter/domain/**,
			src/main/java/org/galatea/starter/entrypoint/messagecontracts/**,
			**/*Config.java,
			**/*Exception.java,
			**/FuseHttpTraceFilter.java,
			**/FuseMessageListenerContainer.java,
			**/Tracer.java,
			**/Application.java
		</sonar.coverage.exclusions>
		<sonar.organization>galatea-associates</sonar.organization>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<!-- Allow us to skip Unit Tests only, if need be, with -Dskip.surefire.tests, but retain the skip all tests functionality of -DskipTests -->
		<skip.surefire.tests>${skipTests}</skip.surefire.tests>
	</properties>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.0.RELEASE</version>
	</parent>

	<dependencies>
		<!-- Spring boot starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<!-- Exclude so we can use log4j instead -->
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Use log4j instead of logback -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
			<version>2.0.1.RELEASE</version>
		</dependency>

		<!--Spring Cloud Sleuth for distributed log tracing-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
			<version>2.2.1.RELEASE</version>
		</dependency>

		<!-- Required for log4j to process log4j2.yml -->
		<!-- See: springframework.guru/log4j-2-configuration-using-yaml -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>


		<!-- Use spring-aop and aspectj for our aspects -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>

		<!-- Spring boot jms for getting messages from queues -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-activemq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-broker</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Spring boot web for rest services -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<!-- Exclude Tomcat in favour of Jetty (for performance reasons) -->
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jetty</artifactId>
		</dependency>

		<!-- SWAGGER for API documentation -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>
		
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>

		<!-- Web content negotiation -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.16.1</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.protobuf-java-format</groupId>
			<artifactId>protobuf-java-format</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>

		<!-- Converting between POJOs and CSV -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-csv</artifactId>
			<version>2.8.8</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.9.9</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>2.9.9</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.10.8</version>
		</dependency>

		<!-- JAXB - converting between POJOs and XML -->
		<dependency>
			<groupId>com.sun.activation</groupId>
			<artifactId>javax.activation</artifactId>
			<version>1.2.0</version>
		</dependency>

		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>${jaxb.api.version}</version>
		</dependency>

		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.3.0</version>
		</dependency>

		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>${jaxb.api.version}</version>
		</dependency>

		<!-- Enable production-ready features with actuator -->
		<!-- See: http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints -->
		<!-- and: www.baeldung.com/spring-boot-actuators -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- Spring data to connect to sql db. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

    <!-- H2 database for persistence -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<!-- Lombok for tostring, hashcode, etc -->
		<!-- See: https://projectlombok.org/ -->
		<!-- Eclipse plugin to recognizes the Lombok annotations: http://jnb.ociweb.com/jnb/jnbJan2010.html#installation -->
		<!-- IntelliJ plugin to recognize Lombok annotations: https://plugins.jetbrains.com/plugin/6317 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Gives us a logging aspect -->
		<dependency>
			<groupId>net.sf.aspect4log</groupId>
			<artifactId>aspect4log</artifactId>
			<version>1.0.7</version>
		</dependency>

		<!-- Useful collections -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.1</version>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
		</dependency>

		<!-- Excel spreadsheet reading and writing -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>4.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>4.1.0</version>
		</dependency>

		<!-- Ehcache for caching. Having ehcache.xml in src/main/resources tells SpringBoot to use EhCache as the caching implementation for @Cacheable -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency>

		<!-- Spring caching framework inside this -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.1.2.RELEASE</version>
		</dependency>

		<!-- Support for Ehcache and others -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>5.1.2.RELEASE</version>
		</dependency>

    <dependency>
      <groupId>io.github.openfeign</groupId>
      <artifactId>feign-core</artifactId>
      <version>9.5.1</version>
    </dependency>
    <dependency>
      <groupId>io.github.openfeign</groupId>
      <artifactId>feign-jackson</artifactId>
      <version>9.5.1</version>
    </dependency>

		<!-- Testing dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- WireMock import for stubbing external REST services, see IexRestControllerTest.java -->
		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock-jre8</artifactId>
			<version>2.24.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<artifactId>spring-cloud-contract-wiremock</artifactId>
			<groupId>org.springframework.cloud</groupId>
			<scope>test</scope>
			<version>2.0.1.RELEASE</version>
		</dependency>
		<!-- Useful for waiting for an async task to complete -->
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>2.0.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>spring-mock-mvc</artifactId>
			<version>3.3.0</version>
			<scope>test</scope>
		</dependency>
		<!-- Allows us to parameterize tests -->
		<dependency>
			<groupId>pl.pragmatists</groupId>
			<artifactId>JUnitParams</artifactId>
			<version>1.0.5</version>
			<scope>test</scope>
		</dependency>
		<!-- Allows us to run test suites that include/exclude junit categories -->
		<dependency>
			<groupId>com.googlecode.junit-toolbox</groupId>
			<artifactId>junit-toolbox</artifactId>
			<version>2.2</version>
		</dependency>
	</dependencies>
	<build>
		<extensions>
			<extension>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>1.6.1</version>
			</extension>
		</extensions>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<configLocation>style/google_checks_modified.xml</configLocation>
					<violationSeverity>warning</violationSeverity>
					<excludes>**/ProtobufMessages.java</excludes>
				</configuration>
				<executions>
					<execution>
						<!-- Run checkstyle as part of the validate phase -->
						<phase>validate</phase>
						<!-- See https://maven.apache.org/plugins/maven-checkstyle-plugin/plugin-info.html
						     for the different checkstyle goals-->
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<excludedGroups>org.galatea.starter.IntegrationTestCategory</excludedGroups>
					<!-- skips surefire tests without skipping failsafe tests. Property 
						value seems to magically default to false -->
					<!-- See https://stackoverflow.com/questions/6612344/prevent-unit-tests-in-maven-but-allow-integration-tests -->
					<skipTests>${skip.surefire.tests}</skipTests>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<includes>
						<include>**/*.java</include>
					</includes>
					<groups>org.galatea.starter.IntegrationTestCategory</groups>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.xolstice.maven.plugins</groupId>
				<artifactId>protobuf-maven-plugin</artifactId>
				<version>0.6.1</version>
				<configuration>
					<protocArtifact>
						com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}
					</protocArtifact>
					<pluginId>grpc-java</pluginId>
					<pluginArtifact>
						io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}
					</pluginArtifact>
				</configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
            </goals>
          </execution>
        </executions>
			</plugin>
		</plugins>
	</build>
</project>
